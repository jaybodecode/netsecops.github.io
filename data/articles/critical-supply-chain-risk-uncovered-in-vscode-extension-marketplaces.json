{
  "id": "5f0b563c-bc1f-42b7-abaf-cd1098d10d5e",
  "slug": "critical-supply-chain-risk-uncovered-in-vscode-extension-marketplaces",
  "headline": "Massive Supply Chain Risk Found in VSCode Marketplace; 100+ Extensions Leaked Access Tokens",
  "title": "Critical Supply Chain Risk Uncovered in VSCode Extension Marketplaces, Potentially Affecting 150,000 Users",
  "summary": "Researchers at Wiz have discovered a significant supply chain risk in the popular VSCode and OpenVSX extension marketplaces. They found that publishers of over 100 extensions had inadvertently leaked their access tokens, which could have allowed attackers to hijack the extensions and distribute malware to more than 150,000 users. The research also uncovered over 550 exposed secrets within 500+ extensions, providing access to developer accounts on services like AWS, GitHub, and OpenAI, further highlighting the pervasive security risks in the software development ecosystem.",
  "full_report": "## Executive Summary\nCloud security firm **[Wiz](https://www.wiz.io/)** has identified a critical supply chain risk within the Visual Studio Code (VSCode) and OpenVSX extension marketplaces, which are used by millions of software developers worldwide. The research team discovered that publishers of more than 100 extensions had accidentally leaked their access tokens. This exposure created a scenario where a threat actor could have seized control of these extensions, pushed malicious updates, and potentially distributed malware to over 150,000 users. The investigation also unearthed over 550 other exposed secrets (e.g., API keys, credentials) within more than 500 extensions, revealing a widespread and systemic issue of poor secrets management in the software development lifecycle.\n\n---\n\n## Threat Overview\nThe core of the issue lies in the leakage of publisher access tokens. These tokens are essentially the keys to the kingdom for an extension; whoever possesses one can publish new versions, modify the extension's code, and change its description. Wiz researchers found over 100 such tokens that were publicly exposed, often because they were accidentally committed to public **[GitHub](https://github.com/)** repositories.\n\nA threat actor with one of these tokens could have performed a devastating supply chain attack:\n\n1.  **Hijack an Extension:** Use the leaked token to authenticate as the legitimate publisher.\n2.  **Inject Malicious Code:** Add malicious code (e.g., a credential stealer, a backdoor, or ransomware) to the extension.\n3.  **Publish a Malicious Update:** Push the new, trojanized version to the marketplace.\n4.  **Mass Compromise:** The malicious update would be automatically pushed to all users who had the extension installed, leading to a widespread compromise.\n\nBeyond the publisher tokens, the researchers found an additional 550+ exposed secrets within the code of over 500 different extensions. These included API keys and credentials for services like **[OpenAI](https://openai.com/)**, **[Anthropic](https://www.anthropic.com/)**, **[Amazon Web Services (AWS)](https://aws.amazon.com/)**, and **[MongoDB](https://www.mongodb.com/)**. This secondary finding highlights a broader culture of insecure coding practices and presents an additional attack surface, allowing attackers to compromise developers' cloud infrastructure and services.\n\n---\n\n## Impact Assessment\n\n*   **Large-Scale Supply Chain Attack Potential:** The potential to compromise 150,000+ users through just over 100 extensions demonstrates the massive leverage that supply chain attacks provide. A single compromised developer tool can lead to thousands of downstream breaches.\n*   **Compromise of Sensitive Environments:** Developers often have privileged access to production environments, source code, and sensitive data. Malware delivered via a VSCode extension could steal these credentials, leading to a full-scale breach of the developer's employer.\n*   **Financial and Resource Theft:** The exposed API keys for services like AWS and OpenAI could be abused by attackers to run costly computations (e.g., cryptocurrency mining) or steal proprietary data and models, resulting in significant financial losses for the extension owners.\n*   **Erosion of Trust in Open-Source Ecosystems:** Incidents like this damage trust in public software repositories and extension marketplaces, which are vital for modern software development. It forces developers and organizations to take a more cautious, zero-trust approach to using third-party code.\n\n---\n\n## Detection & Response\n\n*   **Secrets Scanning:** Developers and organizations must integrate automated secrets scanning into their CI/CD pipelines. These tools can scan code for patterns matching API keys, tokens, and passwords before it is committed to a repository. This is a form of **[Static Analysis](https://d3fend.mitre.org/technique/d3f:StaticAnalysis)** (D3-SA).\n*   **Dependency Auditing:** Regularly audit all third-party dependencies, including VSCode extensions. Use tools that can check for known vulnerabilities or suspicious code within these packages.\n*   **Behavioral Monitoring on Developer Endpoints:** Monitor developer workstations for anomalous behavior, such as a code editor process (`code.exe`) making unexpected network connections or accessing sensitive files.\n\n---\n\n## Mitigation\n\n*   **Secrets Management:** Never hardcode secrets (tokens, API keys, passwords) directly in source code. Use a dedicated secrets management solution like HashiCorp Vault, AWS Secrets Manager, or Azure Key Vault to store and dynamically retrieve credentials at runtime. This is a critical **[Application Configuration Hardening](https://d3fend.mitre.org/technique/d3f:ApplicationConfigurationHardening)** (D3-ACH) practice.\n*   **Git Pre-Commit Hooks:** Implement pre-commit hooks in local Git repositories to automatically scan for secrets before a developer can even commit the code. This provides an early, preventative control.\n*   **Publisher Best Practices:** Extension publishers should regularly rotate their access tokens and use features like repository-specific secrets where available to limit the scope of exposure.\n*   **Principle of Least Privilege for Tokens:** Access tokens and API keys should be scoped with the minimum permissions necessary. For example, a key used for a read-only API should not have write permissions.",
  "twitter_post": "ðŸš¨ HUGE supply chain risk in VSCode! Wiz finds 100+ extensions leaked access tokens, putting 150K+ users at risk of malware. 550+ other secrets also found. A developer's nightmare. #VSCode #SupplyChain #CyberSecurity #DevSecOps",
  "meta_description": "Wiz researchers uncovered a major supply chain risk in the VSCode and OpenVSX marketplaces, where leaked access tokens for over 100 extensions could have led to mass malware distribution.",
  "category": [
    "Supply Chain Attack",
    "Vulnerability",
    "Cloud Security"
  ],
  "severity": "critical",
  "entities": [
    {
      "name": "Wiz",
      "type": "vendor",
      "url": "https://www.wiz.io/"
    },
    {
      "name": "Visual Studio Code (VSCode)",
      "type": "product"
    },
    {
      "name": "OpenVSX",
      "type": "product"
    },
    {
      "name": "GitHub",
      "type": "company",
      "url": "https://github.com/"
    },
    {
      "name": "OpenAI",
      "type": "company",
      "url": "https://openai.com/"
    },
    {
      "name": "Anthropic",
      "type": "company"
    },
    {
      "name": "Amazon Web Services (AWS)",
      "type": "product",
      "url": "https://aws.amazon.com/"
    },
    {
      "name": "MongoDB",
      "type": "product",
      "url": "https://www.mongodb.com/"
    }
  ],
  "cves": [],
  "sources": [
    {
      "url": "https://www.securityweek.com/in-other-news-crowdstrike-vulnerabilities-cisa-layoffs-mango-data-breach/",
      "title": "In Other News: CrowdStrike Vulnerabilities, CISA Layoffs, Mango Data Breach",
      "date": "2025-10-17",
      "friendly_name": "SecurityWeek",
      "website": "securityweek.com"
    },
    {
      "url": "https://www.cyberdaily.au/security/10317-f5-reveals-security-incident-one-expert-calls-a-5-alarm-fire",
      "title": "F5 reveals security incident one expert calls a '5-alarm fire'",
      "date": "2025-10-17",
      "friendly_name": "Cyber Daily",
      "website": "cyberdaily.au"
    }
  ],
  "events": [],
  "mitre_techniques": [
    {
      "id": "T0862",
      "name": "Supply Chain Compromise",
      "tactic": "Initial Access"
    },
    {
      "id": "T1552.006",
      "name": "Unsecured Credentials: In Public Code Repositories",
      "tactic": "Credential Access"
    },
    {
      "id": "T1195.002",
      "name": "Compromise Software Supply Chain: Compromise Software Update Mechanism",
      "tactic": "Initial Access"
    }
  ],
  "mitre_mitigations": [
    {
      "id": "M0938",
      "name": "Supply Chain Risk Management",
      "description": "Treating third-party extensions as part of the software supply chain and vetting them for security is a critical mitigation.",
      "domain": "enterprise"
    },
    {
      "id": "M1054",
      "name": "Software Configuration",
      "d3fend_techniques": [
        {
          "id": "D3-ACH",
          "name": "Application Configuration Hardening",
          "url": "https://d3fend.mitre.org/technique/d3f:ApplicationConfigurationHardening"
        }
      ],
      "description": "Implementing secure coding practices, such as not hardcoding secrets, is a fundamental configuration control for developers.",
      "domain": "enterprise"
    },
    {
      "id": "M0948",
      "name": "Application Developer Guidance",
      "description": "Providing developers with clear guidance and tools for secrets management and secure coding.",
      "domain": "enterprise"
    }
  ],
  "d3fend_countermeasures": [
    {
      "technique_id": "D3-SA",
      "technique_name": "Static Analysis",
      "url": "https://d3fend.mitre.org/technique/d3f:StaticAnalysis",
      "recommendation": "To prevent the inadvertent leakage of secrets as seen in the VSCode marketplace, organizations must integrate automated static analysis security testing (SAST) and secrets scanning directly into their CI/CD pipelines. Before any code is merged into a main branch or deployed, these tools should automatically scan the entire codebase for hardcoded credentials, API keys, and access tokens. If a secret is found, the build should fail automatically, preventing the secret from ever being committed to a shared repository like GitHub. This 'shift-left' approach moves security into the earliest stages of development and is the most effective way to prevent this specific type of supply chain risk at its source.",
      "mitre_mitigation_id": "M0948"
    },
    {
      "technique_id": "D3-ACH",
      "technique_name": "Application Configuration Hardening",
      "url": "https://d3fend.mitre.org/technique/d3f:ApplicationConfigurationHardening",
      "recommendation": "Developers must adopt secure coding practices that eliminate hardcoded secrets entirely. Instead of placing tokens in code or configuration files, use a dedicated secrets management service (e.g., HashiCorp Vault, AWS Secrets Manager, Azure Key Vault). The application should be configured to dynamically fetch secrets from this vault at runtime using a secure authentication method (like IAM roles for cloud workloads). This ensures that secrets are never present in the source code, and therefore cannot be leaked through an accidental commit to a public repository. This is a fundamental change in application architecture that is essential for modern, secure software development.",
      "mitre_mitigation_id": "M1054"
    }
  ],
  "iocs": [],
  "cyber_observables": [
    {
      "type": "command_line_pattern",
      "value": "git commit -m",
      "description": "Monitor git commit messages for accidental inclusion of secrets. Automated scanners are more effective for the code itself.",
      "context": "CI/CD pipeline logs, source code management systems",
      "confidence": "low"
    },
    {
      "type": "other",
      "value": "Hardcoded API keys in public code repositories",
      "description": "Proactively scanning public repositories for keys associated with your organization is a key hunting technique.",
      "context": "GitHub secret scanning, specialized scanning tools",
      "confidence": "high"
    },
    {
      "type": "process_name",
      "value": "code.exe",
      "description": "The main process for VSCode. Monitor for this process making suspicious outbound network connections or spawning child processes like powershell.exe.",
      "context": "EDR telemetry, host-based firewalls",
      "confidence": "medium"
    }
  ],
  "tags": [
    "VSCode",
    "Supply Chain Attack",
    "Wiz",
    "Secrets Management",
    "DevSecOps",
    "GitHub",
    "Vulnerability"
  ],
  "extract_datetime": "2025-10-18T15:00:00.000Z",
  "article_type": "NewsArticle",
  "impact_scope": {
    "geographic_scope": "global",
    "industries_affected": [
      "Technology"
    ],
    "other_affected": [
      "Software developers",
      "Users of VSCode and OpenVSX extensions"
    ],
    "people_affected_estimate": "150,000+"
  },
  "keywords": [
    "VSCode security",
    "supply chain risk",
    "Wiz research",
    "leaked access tokens",
    "secrets management",
    "DevSecOps",
    "OpenVSX",
    "software supply chain"
  ],
  "pub_date": "2025-10-18",
  "reading_time_minutes": 4,
  "createdAt": "2025-10-18T15:00:00.000Z",
  "updatedAt": "2025-10-18T15:00:00.000Z"
}