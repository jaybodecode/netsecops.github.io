{
  "id": "37be1090-7bdb-4c1f-bc59-2f57c0131285",
  "slug": "redis-patches-critical-redishell-rce-vulnerability-cve-2025-49844",
  "headline": "Redis Patches Critical \"RediShell\" RCE Flaw (CVE-2025-49844) in Lua Sandbox",
  "title": "Critical \"RediShell\" RCE Vulnerability (CVE-2025-49844) in Redis Allows Sandbox Escape",
  "summary": "Redis has released patches for CVE-2025-49844, a critical use-after-free vulnerability nicknamed \"RediShell\" by the Wiz researchers who discovered it. The flaw, announced on October 7, 2025, allows an authenticated attacker to escape the Lua sandbox and achieve remote code execution (RCE) on the underlying server. The risk is especially high for the estimated 330,000 internet-exposed Redis instances, around 60,000 of which are believed to have no authentication enabled. Because official Redis container images disable authentication by default, these instances are vulnerable to unauthenticated RCE. Security agencies like Germany's BSI are warning of imminent exploitation.",
  "full_report": "## Executive Summary\nOn October 7, 2025, **[Redis](https://redis.com/)** announced patches for a critical remote code execution (RCE) vulnerability, **`CVE-2025-49844`**. Discovered by researchers at **[Wiz](https://www.wiz.io)** and dubbed \"RediShell,\" the flaw is a use-after-free memory corruption bug that enables an attacker to escape the Lua scripting sandbox and execute arbitrary code on the host operating system. While the vulnerability requires authentication, the risk is dramatically amplified by the widespread misconfiguration of Redis instances. An estimated 60,000 of the 330,000 internet-exposed Redis servers lack authentication, making them vulnerable to unauthenticated RCE. The issue is exacerbated by official Redis container images, which disable authentication by default. Due to the attack's simplicity and Redis's popularity, widespread exploitation is expected.\n\n---\n\n## Vulnerability Details\n**`CVE-2025-49844`** (\"RediShell\") is a critical use-after-free vulnerability in the Redis server's implementation of the Lua scripting engine. Lua scripting is a default feature in Redis, allowing users to execute complex commands atomically.\n\n### Technical Description\nAn attacker with the ability to execute Lua scripts can submit a specially crafted script that triggers a memory corruption condition. This allows the attacker to break out of the constraints of the Lua sandbox and execute native code directly on the server. This provides the attacker with the same level of privilege as the Redis process itself. The attack is reportedly simple to execute once the initial script is developed.\n\n## Affected Systems\n*   **Redis** versions that support Lua scripting (default in most modern versions). Specific affected version ranges are detailed in the official Redis advisory.\n*   Instances running in containers using the official Redis image are at high risk if they have not been manually configured with authentication.\n\n## Exploitation Status\nAs of October 7, 2025, no active exploitation has been publicly confirmed, but security researchers and agencies like Germany's **Federal Office for Information Security (BSI)** anticipate that attacks will begin imminently. The combination of a large number of exposed, unauthenticated instances and the severity of the flaw (RCE) makes it a highly attractive target for attackers.\n\n## Impact Assessment\nSuccessful exploitation of RediShell grants an attacker full control over the Redis server, leading to severe consequences:\n*   **Data Theft**: Attackers can exfiltrate all data stored within the Redis instance, which often includes sensitive session tokens, user data, and application caches.\n*   **Lateral Movement**: If the Redis server is running in a cloud environment like AWS or GCP, the attacker can steal IAM role credentials from the instance metadata service. This allows them to pivot and attack other cloud resources. ([`T1528 - Steal Application Access Token`](https://attack.mitre.org/techniques/T1528/))\n*   **Ransomware/Cryptojacking**: The attacker can use the compromised server to deploy ransomware within the network or install cryptomining malware, consuming system resources. ([`T1496 - Resource Hijacking`](https://attack.mitre.org/techniques/T1496/))\n*   **Persistence**: The attacker can establish persistence on the host system, ensuring continued access even if the Redis service is restarted. ([`T1547.001 - Registry Run Keys / Startup Folder`](https://attack.mitre.org/techniques/T1547/001/))\n\n## Cyber Observables for Detection\nDetection efforts should focus on Redis server logs and host-based monitoring.\n\n| Type | Value | Description |\n|---|---|---|\n| `log_source` | Redis Logs | Monitor for execution of unusual or abnormally complex Lua scripts, especially from untrusted sources. |\n| `command_line_pattern` | `redis-server` | Monitor for anomalous child processes spawned by the `redis-server` process, such as shells (`/bin/sh`, `bash`) or network utilities (`curl`, `wget`). |\n| `network_traffic_pattern` | Outbound connections from Redis server | A Redis server should typically only communicate with application servers. Alert on any outbound connections to the internet or other unexpected systems. |\n| `port` | `6379` | Monitor for connection attempts to the default Redis port from unauthorized or external IP addresses. |\n\n## Detection Methods\n1.  **Host-Based Monitoring**: Use an EDR agent on Redis hosts to detect suspicious process creation. A `redis-server` process spawning a shell is a major red flag. This aligns with D3FEND's [`Process Analysis`](https://d3fend.mitre.org/technique/d3f:ProcessAnalysis).\n2.  **Network Security Monitoring**: Analyze network traffic to and from Redis servers. Alert on connections from the public internet if the server should be internal-only. Monitor for large, unexpected data transfers. Use D3FEND's [`Outbound Traffic Filtering`](https://d3fend.mitre.org/technique/d3f:OutboundTrafficFiltering) to block unauthorized connections.\n3.  **Audit Redis Commands**: If supported, enable auditing of Redis commands and look for the execution of `EVAL` or `EVALSHA` with suspicious-looking Lua scripts.\n\n## Remediation Steps\n1.  **Patch Immediately**: Upgrade all Redis instances to the patched versions as specified by Redis. This is the most effective solution and a direct application of D3FEND's [`Software Update`](https://d3fend.mitre.org/technique/d3f:SoftwareUpdate).\n2.  **Enforce Authentication**: For any Redis instance, especially those exposed to the network, enable strong password authentication (the `requirepass` directive). This is a critical security best practice that would mitigate the unauthenticated attack vector.\n3.  **Restrict Network Access**: Configure firewall rules to ensure that Redis servers are only accessible from the specific application servers that require access. Never expose a Redis instance directly to the public internet. This is a form of D3FEND [`Inbound Traffic Filtering`](https://d3fend.mitre.org/technique/d3f:InboundTrafficFiltering).\n4.  **Run as Low-Privilege User**: Configure Redis to run as a dedicated, low-privilege user (`redis`) rather than `root`. This contains the impact of a successful sandbox escape, preventing an immediate full system compromise.",
  "twitter_post": "üö® CRITICAL VULNERABILITY: Redis patches \"RediShell\" (CVE-2025-49844), an RCE flaw allowing Lua sandbox escape. 60k+ internet-exposed servers may be unauthenticated and at risk. Update now! ‚ö†Ô∏è #Redis #CyberSecurity #RCE #Vulnerability",
  "meta_description": "Redis has patched CVE-2025-49844, a critical RCE vulnerability named 'RediShell' that allows attackers to escape the Lua sandbox. Learn about the risks and how to mitigate this flaw.",
  "category": [
    "Vulnerability",
    "Cloud Security"
  ],
  "severity": "critical",
  "entities": [
    {
      "name": "Redis",
      "type": "vendor",
      "url": "https://redis.com/"
    },
    {
      "name": "Wiz",
      "type": "security_organization",
      "url": "https://www.wiz.io/"
    },
    {
      "name": "Federal Office for Information Security (BSI)",
      "type": "government_agency"
    },
    {
      "name": "RediShell",
      "type": "malware"
    },
    {
      "name": "Lua",
      "type": "technology",
      "url": "https://en.wikipedia.org/wiki/Lua_(programming_language)"
    }
  ],
  "cves": [
    {
      "id": "CVE-2025-49844",
      "severity": "critical"
    }
  ],
  "sources": [
    {
      "url": "https://www.helpnetsecurity.com/2025/10/07/cve-2025-49844/",
      "title": "Redis patches critical ‚ÄúRediShell‚Äù RCE vulnerability, update ASAP! (CVE-2025-49844)",
      "date": "2025-10-07",
      "friendly_name": "Help Net Security",
      "website": "helpnetsecurity.com"
    },
    {
      "url": "https://www.bsi.bund.de/SharedDocs/Cybersicherheitswarnungen/DE/2025/2025-312827-1032.html",
      "title": "Kritische Schwachstelle in Redis [Google Translation: Critical vulnerability in Redis]",
      "date": "2025-10-07",
      "friendly_name": "BSI",
      "website": "bsi.bund.de"
    }
  ],
  "events": [
    {
      "datetime": "2025-10-07",
      "summary": "Redis and Wiz disclose the 'RediShell' vulnerability (CVE-2025-49844) and release patches."
    }
  ],
  "mitre_techniques": [
    {
      "id": "T1203",
      "name": "Exploitation for Client Execution",
      "tactic": "Execution"
    },
    {
      "id": "T1059.009",
      "name": "Lua",
      "tactic": "Execution"
    },
    {
      "id": "T1190",
      "name": "Exploit Public-Facing Application",
      "tactic": "Initial Access"
    },
    {
      "id": "T1496",
      "name": "Resource Hijacking",
      "tactic": "Impact"
    },
    {
      "id": "T1528",
      "name": "Steal Application Access Token",
      "tactic": "Credential Access"
    }
  ],
  "mitre_mitigations": [
    {
      "id": "M1051",
      "name": "Update Software",
      "d3fend_techniques": [
        {
          "id": "D3-SU",
          "name": "Software Update",
          "url": "https://d3fend.mitre.org/technique/d3f:SoftwareUpdate"
        }
      ],
      "description": "Upgrade to a patched version of Redis to remediate the vulnerability.",
      "domain": "enterprise"
    },
    {
      "id": "M1035",
      "name": "Limit Access to Resource Over Network",
      "d3fend_techniques": [
        {
          "id": "D3-NI",
          "name": "Network Isolation",
          "url": "https://d3fend.mitre.org/technique/d3f:NetworkIsolation"
        }
      ],
      "description": "Do not expose Redis instances to the internet. Restrict access to only trusted application servers.",
      "domain": "enterprise"
    },
    {
      "id": "M1027",
      "name": "Password Policies",
      "d3fend_techniques": [
        {
          "id": "D3-SPP",
          "name": "Strong Password Policy",
          "url": "https://d3fend.mitre.org/technique/d3f:StrongPasswordPolicy"
        }
      ],
      "description": "Enforce strong password authentication on all Redis instances using the 'requirepass' directive.",
      "domain": "enterprise"
    },
    {
      "id": "M1048",
      "name": "Application Isolation and Sandboxing",
      "d3fend_techniques": [
        {
          "id": "D3-DA",
          "name": "Dynamic Analysis",
          "url": "https://d3fend.mitre.org/technique/d3f:DynamicAnalysis"
        }
      ],
      "description": "Run Redis in a container with minimal privileges and strict resource limits to contain the impact of a sandbox escape.",
      "domain": "enterprise"
    }
  ],
  "d3fend_countermeasures": [
    {
      "technique_id": "D3-SU",
      "technique_name": "Software Update",
      "url": "https://d3fend.mitre.org/technique/d3f:SoftwareUpdate",
      "recommendation": "The primary and most effective remediation for CVE-2025-49844 is to upgrade all Redis instances to the patched versions provided by the vendor. This should be treated as an emergency change. Use asset inventory and vulnerability management systems to identify all Redis instances across the environment, including those in development and containerized workloads. Prioritize patching for internet-exposed instances first, followed by internal production servers. After patching, verify the version upgrade was successful on all hosts. This action directly closes the use-after-free vulnerability, preventing any attacker from executing the RediShell exploit.",
      "mitre_mitigation_id": "M1051"
    },
    {
      "technique_id": "D3-ACH",
      "technique_name": "Application Configuration Hardening",
      "url": "https://d3fend.mitre.org/technique/d3f:ApplicationConfigurationHardening",
      "recommendation": "As a critical defense-in-depth measure, immediately enforce authentication on all Redis instances. Edit the `redis.conf` file and set a strong, unique password for the `requirepass` directive. This single configuration change mitigates the risk for the ~60,000 unauthenticated instances exposed to the internet, forcing an attacker to first guess or steal a password before they can even attempt to run the malicious Lua script. Additionally, if Lua scripting is not required for business operations, consider disabling it by renaming or removing the `EVAL` and `EVALSHA` commands in the configuration file. These hardening steps dramatically reduce the attack surface, even on unpatched systems.",
      "mitre_mitigation_id": "M1054"
    },
    {
      "technique_id": "D3-ITF",
      "technique_name": "Inbound Traffic Filtering",
      "url": "https://d3fend.mitre.org/technique/d3f:InboundTrafficFiltering",
      "recommendation": "No Redis server should ever be directly exposed to the public internet. Implement strict firewall rules at the network perimeter and on the host itself (host-based firewall) to ensure the Redis port (default 6379) is not accessible from untrusted networks. Access should be restricted to the specific IP addresses of the application servers that need to communicate with it. For cloud environments, use security groups or network ACLs to enforce this policy. This network-level control acts as a powerful compensating measure, preventing remote attackers from reaching the vulnerable service in the first place, regardless of its patch or authentication status.",
      "mitre_mitigation_id": "M1037"
    }
  ],
  "iocs": [],
  "cyber_observables": [
    {
      "type": "port",
      "value": "6379",
      "description": "The default port for Redis. Scans for this port are common for identifying exposed instances. Any connection from the public internet to this port is a major red flag.",
      "context": "Firewall logs, internet-wide scan data (e.g., Shodan), network sensors.",
      "confidence": "high"
    },
    {
      "type": "command_line_pattern",
      "value": "redis-server",
      "description": "The Redis server process. Monitor for this process spawning unexpected child processes, especially shells (`sh`, `bash`) or downloaders (`curl`, `wget`).",
      "context": "EDR logs, Windows Event ID 4688, Linux auditd logs.",
      "confidence": "high"
    },
    {
      "type": "string_pattern",
      "value": "EVAL",
      "description": "The Redis command used to execute Lua scripts. While legitimate, a spike in EVAL commands or commands from an untrusted source could indicate an attack.",
      "context": "Redis command monitoring, application logs.",
      "confidence": "medium"
    },
    {
      "type": "other",
      "value": "Disabled 'requirepass' directive",
      "description": "A Redis configuration without the 'requirepass' directive indicates no authentication is enabled, making it vulnerable to unauthenticated exploitation.",
      "context": "Configuration management database (CMDB), configuration file scanning.",
      "confidence": "high"
    }
  ],
  "tags": [
    "RCE",
    "Redis",
    "Sandbox Escape",
    "Vulnerability",
    "Wiz",
    "Cloud Security"
  ],
  "extract_datetime": "2025-10-07T15:00:00.000Z",
  "article_type": "Advisory",
  "impact_scope": {
    "geographic_scope": "global",
    "industries_affected": [
      "Technology",
      "Other"
    ],
    "other_affected": [
      "Users of Redis",
      "Cloud service customers"
    ]
  },
  "keywords": [
    "CVE-2025-49844",
    "RediShell",
    "Redis vulnerability",
    "remote code execution",
    "Lua sandbox escape",
    "Wiz",
    "cloud security"
  ],
  "pub_date": "2025-10-07",
  "reading_time_minutes": 5,
  "createdAt": "2025-10-07T15:00:00.000Z",
  "updatedAt": "2025-10-07T15:00:00.000Z",
  "updates": [
    {
      "update_id": "update-1",
      "title": "Update 1",
      "summary": "New details emerge on Redis 'RediShell' RCE flaw, revealing it existed for 13 years and impacts 75% of cloud environments.",
      "sources": [
        {
          "title": "October 11, 2025",
          "url": "https://reddotsec.com/2025/10/11/october-11-2025/"
        }
      ]
    }
  ]
}