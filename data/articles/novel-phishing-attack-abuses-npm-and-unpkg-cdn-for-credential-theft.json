{
  "id": "3b22c614-55aa-4d69-b319-6fa60b7eb70e",
  "slug": "novel-phishing-attack-abuses-npm-and-unpkg-cdn-for-credential-theft",
  "headline": "Phishing Campaign Abuses NPM and UNPKG CDN to Steal Credentials",
  "title": "Novel \"Beamglea\" Phishing Campaign Weaponizes NPM Registry and UNPKG CDN to Deliver Malware",
  "summary": "A sophisticated phishing campaign, dubbed \"Beamglea,\" is abusing the public NPM registry and the trusted unpkg.com CDN to host and deliver credential-stealing malware. Researchers at Socket discovered over 175 malicious, disposable NPM packages created solely to serve a malicious JavaScript file. Attackers send HTML lures to victims that load the script from the reputable unpkg.com domain, bypassing traditional domain-based security filters. This technique, which has targeted over 135 organizations in Europe, represents a dangerous evolution in supply chain abuse, turning developer infrastructure into a tool for direct phishing attacks.",
  "full_report": "## Executive Summary\nA novel and alarming phishing technique has been identified that repurposes trusted software supply chain infrastructure for credential theft. Dubbed the \"Beamglea\" campaign, threat actors are publishing hundreds of disposable packages to the **[NPM](https://www.npmjs.com/)** registry, not to infect developer builds, but to abuse the **unpkg.com** Content Delivery Network (CDN). By embedding a script tag in an HTML lure that points to a malicious JavaScript file hosted on the trusted `unpkg.com` domain, attackers can bypass email gateways and browser security controls that block unknown or suspicious domains. This ecosystem-level abuse has already targeted over 135 organizations, primarily in Europe, marking a significant shift in how threat actors leverage open-source platforms.\n\n---\n\n## Threat Overview\nThe attack, discovered by researchers at Socket and Snyk, does not follow the typical supply chain attack pattern of poisoning a dependency. Instead, it uses the supply chain as a delivery mechanism for a classic phishing attack. The attackers publish numerous small, randomly named packages (e.g., `redirect-[a-z0-9]{6}`) to NPM. Each package contains a malicious JavaScript file, `beamglea.js`. The unpkg.com CDN, which automatically mirrors all public NPM packages, then makes this malicious file available over HTTPS from its trusted domain. The attackers send targets an HTML file attachment, which, when opened, executes the script from `unpkg.com`. The script then redirects the user to an attacker-controlled phishing page, pre-filling the victim's email address to enhance the lure's legitimacy.\n\n## Technical Analysis\nThe campaign's effectiveness lies in its clever abuse of legitimate services:\n\n- **Infrastructure Abuse ([`T1584 - Compromise Infrastructure`](https://attack.mitre.org/techniques/T1584/)):** The threat actors are not compromising NPM or unpkg, but are abusing their intended functionality. They use NPM as free, anonymous hosting and unpkg as a free, trusted CDN.\n- **Phishing ([`T1566.001 - Spearphishing Attachment`](https://attack.mitre.org/techniques/T1566/001/)):** The initial vector is a business-themed email with an HTML attachment. This avoids direct links in the email body that might be scanned.\n- **Trusted Domain for Payload Delivery:** The core of the technique is the `<script>` tag within the HTML file pointing to the malicious `beamglea.js` file on `unpkg.com`. Since `unpkg.com` is a legitimate and widely used service, it is highly unlikely to be on any blocklist, allowing the payload to be fetched and executed.\n- **Credential Theft:** The executed JavaScript redirects the browser to a phishing landing page designed to harvest user credentials (e.g., for Microsoft 365, Google Workspace).\n- **Reconnaissance ([`T1592 - Gather Victim Host Information`](https://attack.mitre.org/techniques/T1592/)):** The script pre-fills the victim's email on the phishing page, a simple but effective social engineering trick to lower the victim's guard.\n\n## Impact Assessment\nThis technique poses a significant threat to organizations for several reasons:\n- **Bypasses Security Controls:** It effectively neutralizes security solutions that rely on domain reputation and blocklists, as the malicious payload is delivered from a trusted source.\n- **Scalability and Anonymity:** The use of disposable NPM packages allows attackers to quickly rotate their infrastructure at no cost, making takedowns difficult.\n- **Erosion of Trust:** This abuse of critical open-source infrastructure erodes trust in the ecosystem and forces security teams to reconsider which services they implicitly trust.\n- **Targeted Attacks:** The campaign has been observed targeting specific organizations in the technology, industrial, and energy sectors, indicating a degree of targeting beyond opportunistic phishing.\n\n## Cyber Observables for Detection\nDetection focuses on the local execution of the HTML lure and the subsequent network traffic.\n\n| Type | Value | Description |\n|---|---|---|\n| file_name | `beamglea.js` | The name of the malicious JavaScript payload. |\n| url_pattern | `unpkg.com/redirect-[a-z0-9]{6}/` | The URL pattern used to fetch the malicious script from the CDN. |\n| command_line_pattern | `*.html` | Monitor for local execution of HTML files opened from email attachments. |\n| network_traffic_pattern | Browser process making a connection to unpkg.com immediately followed by a redirect to an unknown/uncategorized domain. | This sequence of events is highly suspicious. |\n\n## Detection & Response\n- **Email Gateway Configuration:** Configure email gateways to block or quarantine HTML attachments, or to strip active script content from them. This is a high-fidelity way to block this initial vector.\n- **Endpoint Monitoring:** Use EDR to monitor for browser processes that are spawned to open local HTML files, especially those originating from an email client's attachment directory. Alert on this behavior.\n- **Proxy Log Analysis:** Analyze web proxy logs for connections to `unpkg.com` that match the `redirect-*` package pattern. While unpkg is legitimate, this specific pattern is indicative of the Beamglea campaign.\n- **D3FEND Techniques:** Implement [`D3-ITF: Inbound Traffic Filtering`](https://d3fend.mitre.org/technique/d3f:InboundTrafficFiltering) at the email gateway to block HTML attachments. Use [`D3-UA: URL Analysis`](https://d3fend.mitre.org/technique/d3f:URLAnalysis) on traffic to detect redirects to known phishing infrastructure following a connection to unpkg.\n\n## Mitigation\n- **User Training:** Educate users about the dangers of opening HTML attachments from external sources, even if they appear to be simple documents.\n- **Browser Security:** Deploy browser isolation technologies that can open attachments in a sandboxed environment, preventing any malicious scripts from accessing the local system or internal network.\n- **Content Disarm and Reconstruction (CDR):** Use a CDR solution at the email gateway to automatically strip all active content (like JavaScript) from HTML attachments, rendering them inert.\n- **Supply Chain Security (Vendor Side):** For services like NPM and unpkg, implementing more robust detection for disposable, suspicious packages and rate-limiting new account publications could help mitigate this abuse.\n- **D3FEND Countermeasures:** The most effective countermeasure is [`D3-EDL: Executable Denylisting`](https://d3fend.mitre.org/technique/d3f:ExecutableDenylisting) applied to email attachments, where policies are set to block potentially active content like `.html` and `.js` files from untrusted senders.",
  "twitter_post": "Novel phishing attack weaponizes the NPM registry & unpkg CDN to deliver malware. ⚠️ Attackers use disposable packages to host credential stealers on the trusted CDN, bypassing security filters. Over 135 orgs targeted. #Phishing #SupplyChain",
  "meta_description": "A novel phishing campaign dubbed \"Beamglea\" abuses the NPM registry and unpkg.com CDN to host and deliver credential-stealing malware, bypassing traditional security filters by using a trusted domain.",
  "category": [
    "Phishing",
    "Supply Chain Attack",
    "Malware"
  ],
  "severity": "medium",
  "entities": [
    {
      "name": "NPM",
      "type": "security_organization"
    },
    {
      "name": "unpkg.com",
      "type": "technology"
    },
    {
      "name": "Socket",
      "type": "security_organization"
    },
    {
      "name": "Snyk",
      "type": "vendor"
    },
    {
      "name": "beamglea.js",
      "type": "malware"
    }
  ],
  "cves": [],
  "sources": [
    {
      "url": "https://socket.dev/blog/massive-npm-supply-chain-attack-infects-developers-during-package-installs",
      "title": "Massive NPM Supply-Chain Attack Infects Developers During Package Installs",
      "date": "2025-10-05",
      "friendly_name": "Socket",
      "website": "socket.dev"
    },
    {
      "url": "https://snyk.io/blog/npm-unpkg-supply-chain-phishing/",
      "title": "Phishing Campaign Leverages NPM and UNPKG CDN for Credential Theft",
      "date": "2025-10-06",
      "friendly_name": "Snyk",
      "website": "snyk.io"
    }
  ],
  "events": [],
  "mitre_techniques": [
    {
      "id": "T1566.001",
      "name": "Spearphishing Attachment",
      "tactic": "Initial Access"
    },
    {
      "id": "T1584.006",
      "name": "Compromise Infrastructure: Web Services",
      "tactic": "Resource Development"
    },
    {
      "id": "T1189",
      "name": "Drive-by Compromise",
      "tactic": "Initial Access"
    },
    {
      "id": "T1204.002",
      "name": "User Execution: Malicious File",
      "tactic": "Execution"
    }
  ],
  "mitre_mitigations": [
    {
      "id": "M1017",
      "name": "User Training",
      "description": "Educate users on the risks of opening attachments, especially HTML files, from untrusted sources.",
      "domain": "enterprise"
    },
    {
      "id": "M1021",
      "name": "Restrict Web-Based Content",
      "d3fend_techniques": [
        {
          "id": "D3-ITF",
          "name": "Inbound Traffic Filtering",
          "url": "https://d3fend.mitre.org/technique/d3f:InboundTrafficFiltering"
        }
      ],
      "description": "Configure email gateways to block, strip, or sandbox active content like JavaScript within HTML attachments.",
      "domain": "enterprise"
    },
    {
      "id": "M1048",
      "name": "Application Isolation and Sandboxing",
      "d3fend_techniques": [
        {
          "id": "D3-DA",
          "name": "Dynamic Analysis",
          "url": "https://d3fend.mitre.org/technique/d3f:DynamicAnalysis"
        }
      ],
      "description": "Use browser isolation technology to open links and attachments from emails in a secure, sandboxed environment.",
      "domain": "enterprise"
    }
  ],
  "d3fend_countermeasures": [
    {
      "technique_id": "D3-ITF",
      "technique_name": "Inbound Traffic Filtering",
      "url": "https://d3fend.mitre.org/technique/d3f:InboundTrafficFiltering",
      "recommendation": "The most direct way to counter the Beamglea campaign is to block the initial delivery vector at the email perimeter. Security teams should configure their email security gateways to specifically handle HTML attachments with high suspicion. The best practice is to implement a policy that blocks all inbound emails containing `.html` or `.htm` attachments from external senders. If blocking is too disruptive, an alternative is to use Content Disarm and Reconstruction (CDR) technology. CDR will automatically parse the HTML attachment, strip out any active content like `<script>` tags, and then rebuild a safe, static version of the file for the recipient. This neutralizes the threat by removing the malicious JavaScript payload before the user ever has a chance to open the file, effectively breaking the attack chain at the first step.",
      "mitre_mitigation_id": "M1037"
    },
    {
      "technique_id": "D3-UA",
      "technique_name": "URL Analysis",
      "url": "https://d3fend.mitre.org/technique/d3f:URLAnalysis",
      "recommendation": "Since this attack leverages a trusted CDN, simple domain blocklisting is ineffective. Advanced URL analysis at the web proxy or DNS filtering layer is required. Security solutions should be configured to inspect the full URL path, not just the domain. Create a specific detection rule to flag and block or alert on any URL containing the pattern `unpkg.com/redirect-*`. While `unpkg.com` itself is legitimate, this specific subdirectory pattern is a high-fidelity indicator of the Beamglea campaign. This allows the organization to continue using the legitimate aspects of the CDN while surgically blocking the malicious components. This approach provides a crucial layer of defense if a malicious HTML attachment makes it past the email gateway.",
      "mitre_mitigation_id": "M1021"
    }
  ],
  "iocs": [],
  "cyber_observables": [
    {
      "type": "url_pattern",
      "value": "unpkg.com/redirect-*",
      "description": "The URL pattern used by the Beamglea campaign to fetch malicious JavaScript from the unpkg CDN.",
      "context": "Web proxy logs, DNS logs, and browser history.",
      "confidence": "high"
    },
    {
      "type": "file_name",
      "value": "beamglea.js",
      "description": "The name of the malicious JavaScript payload used in this phishing campaign.",
      "context": "File system scans, browser cache analysis.",
      "confidence": "high"
    },
    {
      "type": "log_source",
      "value": "Email Gateway Logs",
      "description": "Monitor for inbound emails with HTML attachments, which serve as the initial delivery vector.",
      "context": "SIEM analysis of email security appliance logs.",
      "confidence": "high"
    },
    {
      "type": "network_traffic_pattern",
      "value": "unpkg.com -> [uncategorized domain]",
      "description": "A network connection pattern where a browser connects to unpkg.com and is immediately redirected to a new or suspicious domain is an indicator of this attack.",
      "context": "Web proxy logs, firewall logs.",
      "confidence": "medium"
    }
  ],
  "tags": [
    "Phishing",
    "Supply Chain Attack",
    "NPM",
    "CDN Abuse",
    "Credential Theft"
  ],
  "extract_datetime": "2025-10-06T15:00:00.000Z",
  "article_type": "Analysis",
  "impact_scope": {
    "geographic_scope": "regional",
    "countries_affected": [
      "Europe"
    ],
    "industries_affected": [
      "Technology",
      "Energy"
    ],
    "other_affected": [
      "industrial sector organizations"
    ],
    "people_affected_estimate": "Over 135 organizations"
  },
  "pub_date": "2025-10-06",
  "reading_time_minutes": 4,
  "createdAt": "2025-10-06T15:00:00.000Z",
  "updatedAt": "2025-10-06T15:00:00.000Z"
}