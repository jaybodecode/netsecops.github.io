{
  "id": "18d396dc-e598-4f7a-8e38-f3a37694112d",
  "slug": "175-malicious-npm-packages-used-in-phishing-campaign",
  "headline": "175 Malicious NPM Packages Target Developers in Widespread Phishing Attack",
  "title": "Researchers Uncover 175 Malicious npm Packages with 26,000 Downloads in Credential Phishing Campaign",
  "summary": "A significant software supply chain attack has been identified on the npm open-source repository, where researchers discovered 175 malicious packages that were downloaded approximately 26,000 times. These packages were trojanized to execute credential phishing attacks against developers, aiming to steal logins and API keys. The campaign, which primarily targeted the technology and energy sectors, often used typosquatting techniques to mimic legitimate packages. This incident highlights the critical need for organizations to implement stringent dependency vetting and runtime security monitoring to defend against attacks targeting the software development lifecycle.",
  "full_report": "## Executive Summary\nSecurity researchers have uncovered a large-scale credential phishing campaign targeting developers through the **[npm](https://www.npmjs.com/)** open-source package repository. The campaign involved 175 malicious packages, which were downloaded a total of 26,000 times. These packages were designed to steal developer credentials and API keys upon installation, posing a severe **[supply chain attack](https://en.wikipedia.org/wiki/Supply_chain_attack)** risk. The attackers used techniques like typosquatting to trick developers into installing the malicious code. The primary targets were organizations in the technology and energy sectors. This incident underscores the vulnerability of the open-source ecosystem and the need for robust security measures in the software development lifecycle (SDLC).\n\n---\n\n## Threat Overview\nThe attack leveraged the inherent trust developers place in open-source repositories. Threat actors published 175 packages to npm with names closely resembling popular, legitimate packages (a technique known as typosquatting). These packages contained malicious scripts, often within `post-install` hooks, that would execute automatically after a developer installed them using `npm install`. The scripts were designed to phish for sensitive information, such as developer login credentials for services like GitHub or AWS, private API keys, and other secrets stored in the development environment. Once stolen, these credentials could be used for further malicious activities, including injecting malicious code into private repositories, accessing sensitive corporate data, or moving laterally within the victim's network.\n\n---\n\n## Technical Analysis\nThe core of this attack is the abuse of package manager automation and social engineering. The malicious code was typically obfuscated and embedded within installation scripts.\n\n### MITRE ATT&CK Techniques\n*   [`T1195.002 - Compromise Software Dependencies and Development Tools`](https://attack.mitre.org/techniques/T1195/002/): The primary technique involved publishing malicious packages to a public repository to compromise developer environments.\n*   [`T1059.007 - JavaScript/JScript`](https://attack.mitre.org/techniques/T1059/007/): The malicious logic was executed via JavaScript code within npm's `package.json` scripts.\n*   [`T1552.006 - Stored Information`](https://attack.mitre.org/techniques/T1552/006/): The malware likely searched for credentials and API keys stored in configuration files, environment variables, or other common locations on a developer's machine.\n*   [`T1041 - Exfiltration Over C2 Channel`](https://attack.mitre.org/techniques/T1041/): Once harvested, the stolen credentials were exfiltrated to an attacker-controlled server.\n\n---\n\n## Impact Assessment\nThe impact of this campaign extends far beyond the initial 26,000 downloads. A single compromised developer account can serve as a gateway into an entire organization's software supply chain. Attackers could use stolen credentials to:\n*   Commit malicious code to private source code repositories.\n*   Publish new malicious versions of legitimate internal or public packages.\n*   Access and exfiltrate sensitive intellectual property and customer data.\n*   Pivot from the development environment into production systems.\n\nThis creates a cascading risk that can lead to widespread breaches, affecting both the compromised organization and its customers.\n\n---\n\n## Detection & Response\nDetecting malicious packages requires a proactive approach to dependency management.\n\n1.  **Dependency Auditing**: Regularly run `npm audit` and use third-party Software Composition Analysis (SCA) tools to scan for known vulnerabilities and malicious packages in project dependencies. This can be supported by **[D3-FA: File Analysis](https://d3fend.mitre.org/technique/d3f:FileAnalysis)** to inspect package contents.\n2.  **Runtime Monitoring**: Implement endpoint detection and response (EDR) on developer workstations to monitor for suspicious process behavior, such as an `npm install` process making unexpected network connections or accessing sensitive files (`.env`, `.aws/credentials`).\n3.  **Network Traffic Analysis**: Monitor egress traffic from development environments for connections to known malicious domains or unusual data uploads, which could indicate credential exfiltration. This aligns with **[D3-NTA: Network Traffic Analysis](https://d3fend.mitre.org/technique/d3f:NetworkTrafficAnalysis)**.\n\nIf a malicious package is discovered, the immediate response is to remove it from all projects, rotate all potentially compromised credentials, and perform a forensic analysis of the affected systems.\n\n---\n\n## Mitigation\nPreventing these attacks requires a shift towards a more security-conscious development culture.\n\n1.  **Scoped Registries**: Configure npm to use a private or scoped registry that proxies and vets packages from the public repository. This allows security teams to maintain an allowlist of approved packages.\n2.  **Code Signing and Integrity Checks**: Enforce policies that require package signature verification to ensure the integrity and authenticity of dependencies. Use lockfiles (`package-lock.json`) to pin dependency versions and prevent unexpected updates.\n3.  **Developer Training**: Educate developers on the risks of typosquatting and the importance of verifying package names before installation. Promote a culture of skepticism towards unfamiliar packages.\n4.  **Secrets Management**: Prohibit the storing of secrets in source code or local configuration files. Use a dedicated secrets management solution like HashiCorp Vault or AWS Secrets Manager.",
  "twitter_post": "üö® SUPPLY CHAIN ATTACK: 175 malicious npm packages discovered, downloaded 26k times! The packages were designed to steal developer credentials and API keys. Audit your dependencies now! ‚ö†Ô∏è #npm #SupplyChainAttack #Phishing #DevSecOps",
  "meta_description": "Security researchers found 175 malicious npm packages used in a phishing campaign to steal developer credentials. The packages were downloaded 26,000 times, posing a major supply chain risk.",
  "category": [
    "Supply Chain Attack",
    "Malware",
    "Phishing"
  ],
  "severity": "high",
  "entities": [
    {
      "name": "npm",
      "type": "product"
    }
  ],
  "cves": [],
  "sources": [
    {
      "url": "https://diesec.com/blog/top-5-cybersecurity-news-stories-october-10-2025",
      "title": "Top 5 Cybersecurity News Stories October 10, 2025",
      "date": "2025-10-10",
      "friendly_name": "DIESEC",
      "website": "diesec.com"
    },
    {
      "url": "https://gbhackers.com/snake-keylogger-malware/",
      "title": "Snake Keylogger Uses Weaponized Emails and PowerShell to Steal Sensitive Data",
      "date": "2025-10-11",
      "friendly_name": "GBHackers on Security",
      "website": "gbhackers.com"
    }
  ],
  "events": [],
  "mitre_techniques": [
    {
      "id": "T1195.002",
      "name": "Compromise Software Dependencies and Development Tools",
      "tactic": "Initial Access"
    },
    {
      "id": "T1059.007",
      "name": "JavaScript/JScript",
      "tactic": "Execution"
    },
    {
      "id": "T1552",
      "name": "Unsecured Credentials",
      "tactic": "Credential Access"
    },
    {
      "id": "T1041",
      "name": "Exfiltration Over C2 Channel",
      "tactic": "Exfiltration"
    }
  ],
  "mitre_mitigations": [
    {
      "id": "M1038",
      "name": "Execution Prevention",
      "d3fend_techniques": [
        {
          "id": "D3-EAL",
          "name": "Executable Allowlisting",
          "url": "https://d3fend.mitre.org/technique/d3f:ExecutableAllowlisting"
        }
      ],
      "description": "Use security policies to prevent the execution of untrusted code, such as scripts from unverified npm packages.",
      "domain": "enterprise"
    },
    {
      "id": "M1045",
      "name": "Code Signing",
      "d3fend_techniques": [
        {
          "id": "D3-EAL",
          "name": "Executable Allowlisting",
          "url": "https://d3fend.mitre.org/technique/d3f:ExecutableAllowlisting"
        }
      ],
      "description": "Enforce policies that require dependencies to be cryptographically signed by a trusted source before they can be installed.",
      "domain": "enterprise"
    },
    {
      "id": "M1047",
      "name": "Audit",
      "d3fend_techniques": [
        {
          "id": "D3-SFA",
          "name": "System File Analysis",
          "url": "https://d3fend.mitre.org/technique/d3f:SystemFileAnalysis"
        }
      ],
      "description": "Use Software Composition Analysis (SCA) tools to continuously audit project dependencies for malicious packages and vulnerabilities.",
      "domain": "enterprise"
    }
  ],
  "d3fend_countermeasures": [
    {
      "technique_id": "D3-DA",
      "technique_name": "Dynamic Analysis",
      "url": "https://d3fend.mitre.org/technique/d3f:DynamicAnalysis",
      "recommendation": "To combat threats like the malicious npm packages, organizations should implement dynamic analysis by sandboxing the installation and execution of new or untrusted dependencies. Before a new package is approved for use in development, it should be installed in an isolated environment where its behavior can be monitored. Security teams should look for suspicious activities such as file system enumeration outside the project directory, attempts to access sensitive files (e.g., `~/.ssh/`, `~/.aws/credentials`), or unexpected outbound network connections. Automated sandboxing tools can flag packages that exhibit these malicious behaviors, preventing them from ever reaching developer workstations or CI/CD pipelines. This proactive 'detonation' of packages provides a high-fidelity detection method that goes beyond static analysis of package metadata.",
      "mitre_mitigation_id": "M1048"
    },
    {
      "technique_id": "D3-OTF",
      "technique_name": "Outbound Traffic Filtering",
      "url": "https://d3fend.mitre.org/technique/d3f:OutboundTrafficFiltering",
      "recommendation": "Implement strict outbound traffic filtering on developer workstations and CI/CD runners to block the exfiltration of stolen credentials. The malicious npm packages needed to send stolen API keys and logins to an attacker-controlled server. By default, network policies should deny all outbound traffic from development environments, except to explicitly allowlisted endpoints such as internal artifact repositories, source control, and known-good public services. Any attempt by a process like `node` or `npm` to connect to an unapproved external IP address should be blocked and trigger a high-priority security alert. This containment strategy acts as a critical last line of defense, rendering the credential theft useless even if a developer accidentally installs a malicious package.",
      "mitre_mitigation_id": "M1021"
    }
  ],
  "iocs": [],
  "cyber_observables": [
    {
      "type": "command_line_pattern",
      "value": "npm install <misspelled_package_name>",
      "description": "The use of a misspelled package name is a primary indicator of a typosquatting attack.",
      "context": "Shell history, command line logging (Event ID 4688)",
      "confidence": "high"
    },
    {
      "type": "file_name",
      "value": "package.json",
      "description": "Malicious packages often contain suspicious scripts in the 'scripts' section (e.g., 'postinstall') of the package.json file.",
      "context": "File integrity monitoring, code scanning tools",
      "confidence": "high"
    },
    {
      "type": "network_traffic_pattern",
      "value": "Outbound network connection from 'node' process during package installation",
      "description": "A package installation script making unexpected outbound network connections can be a sign of data exfiltration.",
      "context": "EDR, network firewall logs, process monitoring",
      "confidence": "medium"
    }
  ],
  "tags": [
    "npm",
    "open-source",
    "dependency confusion",
    "typosquatting",
    "credential theft"
  ],
  "extract_datetime": "2025-10-11T15:00:00.000Z",
  "article_type": "NewsArticle",
  "impact_scope": {
    "geographic_scope": "global",
    "industries_affected": [
      "Technology",
      "Energy"
    ]
  },
  "pub_date": "2025-10-11",
  "reading_time_minutes": 5,
  "createdAt": "2025-10-11T15:00:00.000Z",
  "updatedAt": "2025-10-11T15:00:00.000Z"
}